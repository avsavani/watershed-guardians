{"ast":null,"code":"var _jsxFileName = \"/Users/gautamtata/Documents/gautam-project/src/components/Chart/chart.js\";\nimport React, { Component } from 'react';\nimport CanvasJSReact from '../CanvasChart/canvaschart.js';\nimport TestPane from '../TestPane/testpane.js';\nimport ChartModal from '../Modal/modal';\nimport './chart.css';\nlet CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nfunction toggleDataSeries(e) {\n  if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n    e.dataSeries.visible = false;\n  } else {\n    e.dataSeries.visible = true;\n  }\n}\n\nclass Chart extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      selectedTests: [],\n      allTests: []\n    };\n\n    this.onClickTest = testName => {\n      // if testName is already selected, unselect it\n      // if testName is not in selectedTests: add it.\n      var newSelectedTests = [];\n\n      for (var i = 0; i < this.state.selectedTests.length; i++) {\n        let selectedTest = this.state.selectedTests[i];\n\n        if (testName !== selectedTest) {\n          newSelectedTests.push(selectedTest);\n        }\n      }\n\n      if (!this.state.selectedTests.includes(testName)) newSelectedTests.push(testName);\n      this.setState({\n        selectedTests: newSelectedTests\n      });\n    };\n  }\n\n  componentDidMount() {\n    // initializing selectedTests to all possible tests:\n    var testNames = [];\n\n    for (var testName in this.props.data) {\n      if (this.props.data.hasOwnProperty(testName)) {\n        // for each testName in data, we will create a new object to match Canvas.js format:\n        testNames.push(testName);\n      }\n    }\n\n    this.setState({\n      selectedTests: testNames,\n      allTests: testNames\n    });\n  }\n\n  render() {\n    // transform data from data.js to format that Canvas.js expects\n    var canvasData = [];\n\n    for (var testName in this.props.data) {\n      if (this.props.data.hasOwnProperty(testName)) {\n        if (this.state.selectedTests.includes(testName)) {\n          // for each testName in data, we will create a new object to match Canvas.js format:\n          canvasData.push({\n            type: 'spline',\n            name: testName,\n            dataPoints: this.props.data[testName],\n            showInLegend: false\n          });\n        }\n      }\n    }\n\n    let options = {\n      animationEnabled: true,\n      axisX: {\n        title: \"DATE\",\n        includeZero: false\n      },\n      axisY: {\n        title: \"UNITS\",\n        includeZero: false\n      },\n      toolTip: {\n        shared: true\n      },\n      data: canvasData //   return (\n      //  \t<div className=\"chart-container\">\n      //   \t\t<Modal ref=\"modal\" keyboard={(e) => console.log(e)}>\n      //  \t\t\t<CanvasJSChart options={options}/>\n      // \t\t\t<TestPane \n      //  \t\t\ttitle={this.props.title}\n      //   \t\t\t\tselectedTests={this.state.selectedTests}\n      //  \t\t\t\tallTests={this.state.allTests}\n      //   \t\t\t\tonClickTest={this.onClickTest}\n      // \t\t\t/>\n      //   \t\t</Modal>\n      //  \t</div>\n      //   );\n\n    };\n    return React.createElement(ChartModal, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/gautamtata/Documents/gautam-project/src/components/Chart/chart.js"],"names":["React","Component","CanvasJSReact","TestPane","ChartModal","CanvasJSChart","toggleDataSeries","e","dataSeries","visible","Chart","state","selectedTests","allTests","onClickTest","testName","newSelectedTests","i","length","selectedTest","push","includes","setState","componentDidMount","testNames","props","data","hasOwnProperty","render","canvasData","type","name","dataPoints","showInLegend","options","animationEnabled","axisX","title","includeZero","axisY","toolTip","shared"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport CanvasJSReact from '../CanvasChart/canvaschart.js';\nimport TestPane from '../TestPane/testpane.js'\nimport ChartModal from '../Modal/modal'\nimport './chart.css'\n\nlet CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nfunction toggleDataSeries(e) {\n\tif (typeof(e.dataSeries.visible) === \"undefined\" || e.dataSeries.visible ){\n\t  e.dataSeries.visible = false;\n\t} else {\n\t  e.dataSeries.visible = true;\n\t}\n}\n\nclass Chart extends Component {\t\n\tstate = {\n\t\tselectedTests: [],\n\t\t  allTests: []\n\t}\n\tonClickTest = (testName) => {\n\t\t// if testName is already selected, unselect it\n\t\t// if testName is not in selectedTests: add it.\n\t\tvar newSelectedTests = []\n\t\tfor (var i = 0; i < this.state.selectedTests.length; i++) {\n\t\t\tlet selectedTest = this.state.selectedTests[i]\n\t\t\tif (testName !== selectedTest) {\n\t\t\t\tnewSelectedTests.push(selectedTest)\n\t\t\t}\n\t\t}\t\n\t\tif (!this.state.selectedTests.includes(testName)) newSelectedTests.push(testName)\n\t\tthis.setState({selectedTests: newSelectedTests})\n\t}\n\n\tcomponentDidMount() {\n\t\t// initializing selectedTests to all possible tests:\n\t\tvar testNames = []\n\t\tfor (var testName in this.props.data) {\n\t\t\tif (this.props.data.hasOwnProperty(testName)) {\n\t\t\t\t// for each testName in data, we will create a new object to match Canvas.js format:\n\t\t\t\ttestNames.push(testName)\t\n\t\t\t}\n\t\t}\n\t\tthis.setState({selectedTests: testNames, allTests: testNames})\n\t}\n  \n\trender() {\n\t\t// transform data from data.js to format that Canvas.js expects\n\t\tvar canvasData = []\n\t\tfor (var testName in this.props.data) {\n\t\t\tif (this.props.data.hasOwnProperty(testName)) {\n\t\t\t\tif (this.state.selectedTests.includes(testName)) {\n\t\t\t\t\t// for each testName in data, we will create a new object to match Canvas.js format:\n\t\t\t\t\tcanvasData.push(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'spline',\n\t\t\t\t\t\t\tname: testName,\n\t\t\t\t\t\t\tdataPoints: this.props.data[testName],\n\t\t\t\t\t\t\tshowInLegend: false\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet options = {\n\t\t\tanimationEnabled: true,\n\t\t\taxisX : {\n\t          title: \"DATE\",\n\t          includeZero: false\n\t        },\n\t        axisY : {\n\t\t\t\ttitle: \"UNITS\",\n\t\t\t\tincludeZero: false\n\t\t\t},\n\t\t\ttoolTip: {\n\t\t\t\tshared: true\n\t\t\t},\n\t\t\tdata: canvasData,\n\t\t}\n\n\t\t//   return (\n\t\t//  \t<div className=\"chart-container\">\n\t\t//   \t\t<Modal ref=\"modal\" keyboard={(e) => console.log(e)}>\n\t\t//  \t\t\t<CanvasJSChart options={options}/>\n\t\t// \t\t\t<TestPane \n\t\t//  \t\t\ttitle={this.props.title}\n\t\t//   \t\t\t\tselectedTests={this.state.selectedTests}\n\t\t//  \t\t\t\tallTests={this.state.allTests}\n\t\t//   \t\t\t\tonClickTest={this.onClickTest}\n\t\t// \t\t\t/>\n\t\t//   \t\t</Modal>\n\t\t//  \t</div>\n\t\t//   );\n\t\treturn(\n\t\t\t<ChartModal />\n\t\t)\n\t\t\n\t}\n}\n \nexport default Chart;"]},"metadata":{},"sourceType":"module"}