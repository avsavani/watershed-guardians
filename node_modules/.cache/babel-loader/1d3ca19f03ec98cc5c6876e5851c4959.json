{"ast":null,"code":"var _jsxFileName = \"/Users/gautamtata/Documents/gautam-project/src/components/Chart/chart.js\";\nimport React, { Component } from 'react';\nimport CanvasJSReact from '../CanvasChart/canvaschart.js';\nimport TestPane from '../TestPane/testpane.js';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label, Form, FormGroup } from 'reactstrap';\nimport './chart.css';\nlet CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nfunction toggleDataSeries(e) {\n  if (typeof e.dataSeries.visible === \"undefined\" || e.dataSeries.visible) {\n    e.dataSeries.visible = false;\n  } else {\n    e.dataSeries.visible = true;\n  }\n}\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClickTest = testName => {\n      // if testName is already selected, unselect it\n      // if testName is not in selectedTests: add it.\n      var newSelectedTests = [];\n\n      for (var i = 0; i < this.state.selectedTests.length; i++) {\n        let selectedTest = this.state.selectedTests[i];\n\n        if (testName !== selectedTest) {\n          newSelectedTests.push(selectedTest);\n        }\n      }\n\n      if (!this.state.selectedTests.includes(testName)) newSelectedTests.push(testName);\n      this.setState({\n        selectedTests: newSelectedTests\n      });\n    };\n\n    this.state = {\n      modal: false,\n      selectedTests: [],\n      allTests: []\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      modal: !prevState.modal\n    }));\n  }\n\n  componentDidMount() {\n    // initializing selectedTests to all possible tests:\n    var testNames = [];\n\n    for (var testName in this.props.data) {\n      if (this.props.data.hasOwnProperty(testName)) {\n        // for each testName in data, we will create a new object to match Canvas.js format:\n        testNames.push(testName);\n      }\n    }\n\n    this.setState({\n      selectedTests: testNames,\n      allTests: testNames\n    });\n  }\n\n  render() {\n    // transform data from data.js to format that Canvas.js expects\n    var canvasData = [];\n\n    for (var testName in this.props.data) {\n      if (this.props.data.hasOwnProperty(testName)) {\n        if (this.state.selectedTests.includes(testName)) {\n          // for each testName in data, we will create a new object to match Canvas.js format:\n          canvasData.push({\n            type: 'spline',\n            name: testName,\n            dataPoints: this.props.data[testName],\n            showInLegend: false\n          });\n        }\n      }\n    }\n\n    let options = {\n      animationEnabled: true,\n      axisX: {\n        title: \"DATE\",\n        includeZero: false\n      },\n      axisY: {\n        title: \"UNITS\",\n        includeZero: false\n      },\n      toolTip: {\n        shared: true\n      },\n      data: canvasData // return (\n      // \t<div className=\"chart-container\">\n      // \t\t<Modal ref=\"modal\" keyboard={(e) => console.log(e)}>\n      // \t\t\t<CanvasJSChart options={options}/>\n      // \t\t\t<TestPane \n      // \t\t\t\ttitle={this.props.title}\n      // \t\t\t\tselectedTests={this.state.selectedTests}\n      // \t\t\t\tallTests={this.state.allTests}\n      // \t\t\t\tonClickTest={this.onClickTest}\n      // \t\t\t/>\n      // \t\t</Modal>\n      // \t</div>\n      // );\n\n    };\n    console.log('returning modal!');\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"danger\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.props.buttonLabel), React.createElement(Modal, {\n      isOpen: this.state.modal,\n      toggle: this.toggle,\n      className: this.props.className,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(ModalHeader, {\n      toggle: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Modal title\"), React.createElement(ModalBody, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"), React.createElement(ModalFooter, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"primary\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Do Something\"), ' ', React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.toggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Cancel\")))));\n  }\n\n}\n\nexport default Chart;","map":{"version":3,"sources":["/Users/gautamtata/Documents/gautam-project/src/components/Chart/chart.js"],"names":["React","Component","CanvasJSReact","TestPane","Button","Modal","ModalHeader","ModalBody","ModalFooter","Input","Label","Form","FormGroup","CanvasJSChart","toggleDataSeries","e","dataSeries","visible","Chart","constructor","props","onClickTest","testName","newSelectedTests","i","state","selectedTests","length","selectedTest","push","includes","setState","modal","allTests","toggle","bind","prevState","componentDidMount","testNames","data","hasOwnProperty","render","canvasData","type","name","dataPoints","showInLegend","options","animationEnabled","axisX","title","includeZero","axisY","toolTip","shared","console","log","buttonLabel","className"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport CanvasJSReact from '../CanvasChart/canvaschart.js';\nimport TestPane from '../TestPane/testpane.js'\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Input, Label, Form, FormGroup } from 'reactstrap';\n\n\nimport './chart.css'\n\nlet CanvasJSChart = CanvasJSReact.CanvasJSChart;\n\nfunction toggleDataSeries(e) {\n\tif (typeof(e.dataSeries.visible) === \"undefined\" || e.dataSeries.visible ){\n\t  e.dataSeries.visible = false;\n\t} else {\n\t  e.dataSeries.visible = true;\n\t}\n}\n\nclass Chart extends Component {\t\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t  modal: false,\n\t\t  selectedTests: [],\n\t\t  allTests: []\n\t\t};\n\t\n\t\tthis.toggle = this.toggle.bind(this);\n\t  }\n\t\n\t  toggle() {\n\t\tthis.setState(prevState => ({\n\t\t  modal: !prevState.modal\n\t\t}));\n\t  }\n\tonClickTest = (testName) => {\n\t\t// if testName is already selected, unselect it\n\t\t// if testName is not in selectedTests: add it.\n\t\tvar newSelectedTests = []\n\t\tfor (var i = 0; i < this.state.selectedTests.length; i++) {\n\t\t\tlet selectedTest = this.state.selectedTests[i]\n\t\t\tif (testName !== selectedTest) {\n\t\t\t\tnewSelectedTests.push(selectedTest)\n\t\t\t}\n\t\t}\t\n\t\tif (!this.state.selectedTests.includes(testName)) newSelectedTests.push(testName)\n\t\tthis.setState({selectedTests: newSelectedTests})\n\t}\n\n\tcomponentDidMount() {\n\t\t// initializing selectedTests to all possible tests:\n\t\tvar testNames = []\n\t\tfor (var testName in this.props.data) {\n\t\t\tif (this.props.data.hasOwnProperty(testName)) {\n\t\t\t\t// for each testName in data, we will create a new object to match Canvas.js format:\n\t\t\t\ttestNames.push(testName)\t\n\t\t\t}\n\t\t}\n\t\tthis.setState({selectedTests: testNames, allTests: testNames})\n\t}\n  \n\trender() {\n\t\t// transform data from data.js to format that Canvas.js expects\n\t\tvar canvasData = []\n\t\tfor (var testName in this.props.data) {\n\t\t\tif (this.props.data.hasOwnProperty(testName)) {\n\t\t\t\tif (this.state.selectedTests.includes(testName)) {\n\t\t\t\t\t// for each testName in data, we will create a new object to match Canvas.js format:\n\t\t\t\t\tcanvasData.push(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'spline',\n\t\t\t\t\t\t\tname: testName,\n\t\t\t\t\t\t\tdataPoints: this.props.data[testName],\n\t\t\t\t\t\t\tshowInLegend: false\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet options = {\n\t\t\tanimationEnabled: true,\n\t\t\taxisX : {\n\t          title: \"DATE\",\n\t          includeZero: false\n\t        },\n\t        axisY : {\n\t\t\t\ttitle: \"UNITS\",\n\t\t\t\tincludeZero: false\n\t\t\t},\n\t\t\ttoolTip: {\n\t\t\t\tshared: true\n\t\t\t},\n\t\t\tdata: canvasData,\n\t\t}\n\n\t\t// return (\n\t\t// \t<div className=\"chart-container\">\n\t\t// \t\t<Modal ref=\"modal\" keyboard={(e) => console.log(e)}>\n\t\t// \t\t\t<CanvasJSChart options={options}/>\n\t\t// \t\t\t<TestPane \n\t\t// \t\t\t\ttitle={this.props.title}\n\t\t// \t\t\t\tselectedTests={this.state.selectedTests}\n\t\t// \t\t\t\tallTests={this.state.allTests}\n\t\t// \t\t\t\tonClickTest={this.onClickTest}\n\t\t// \t\t\t/>\n\t\t// \t\t</Modal>\n\t\t// \t</div>\n\t\t// );\n\t\tconsole.log('returning modal!')\n\t\treturn (\n\t\t\t<div>\n\t\t\t<div>\n        <Button color=\"danger\" onClick={this.toggle}>{this.props.buttonLabel}</Button>\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n          <ModalHeader toggle={this.toggle}>Modal title</ModalHeader>\n          <ModalBody>\n            Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"primary\" onClick={this.toggle}>Do Something</Button>{' '}\n            <Button color=\"secondary\" onClick={this.toggle}>Cancel</Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n\t\t  </div>\n\t\t)\n\t}\n}\n \nexport default Chart;"]},"metadata":{},"sourceType":"module"}