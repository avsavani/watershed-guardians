{"ast":null,"code":"var React = require('react');\n\nvar transitionEvents = require('domkit/transitionEvents');\n\nvar appendVendorPrefix = require('domkit/appendVendorPrefix');\n\nmodule.exports = function (animation) {\n  return React.createClass({\n    propTypes: {\n      className: React.PropTypes.string,\n      // Close the modal when esc is pressed? Defaults to true.\n      keyboard: React.PropTypes.bool,\n      onShow: React.PropTypes.func,\n      onHide: React.PropTypes.func,\n      animation: React.PropTypes.object,\n      backdrop: React.PropTypes.bool,\n      closeOnClick: React.PropTypes.bool,\n      modalStyle: React.PropTypes.object,\n      backdropStyle: React.PropTypes.object,\n      contentStyle: React.PropTypes.object\n    },\n    getDefaultProps: function () {\n      return {\n        className: \"\",\n        onShow: function () {},\n        onHide: function () {},\n        animation: animation,\n        keyboard: true,\n        backdrop: true,\n        closeOnClick: true,\n        modalStyle: {},\n        backdropStyle: {},\n        contentStyle: {}\n      };\n    },\n    getInitialState: function () {\n      return {\n        willHidden: false,\n        hidden: true\n      };\n    },\n    hasHidden: function () {\n      return this.state.hidden;\n    },\n    addTransitionListener: function (node, handle) {\n      if (node) {\n        var endListener = function (e) {\n          if (e && e.target !== node) {\n            return;\n          }\n\n          transitionEvents.removeEndEventListener(node, endListener);\n          handle();\n        };\n\n        transitionEvents.addEndEventListener(node, endListener);\n      }\n    },\n    handleBackdropClick: function () {\n      if (this.props.closeOnClick) {\n        this.hide();\n      }\n    },\n    render: function () {\n      var hidden = this.hasHidden();\n      if (hidden) return null;\n      var willHidden = this.state.willHidden;\n      var animation = this.props.animation;\n      var modalStyle = animation.getModalStyle(willHidden);\n      var backdropStyle = animation.getBackdropStyle(willHidden);\n      var contentStyle = animation.getContentStyle(willHidden);\n      var ref = animation.getRef(willHidden);\n      var sharp = animation.getSharp && animation.getSharp(willHidden); // Apply custom style properties\n\n      if (this.props.modalStyle) {\n        var prefixedModalStyle = appendVendorPrefix(this.props.modalStyle);\n\n        for (var style in prefixedModalStyle) {\n          modalStyle[style] = prefixedModalStyle[style];\n        }\n      }\n\n      if (this.props.backdropStyle) {\n        var prefixedBackdropStyle = appendVendorPrefix(this.props.backdropStyle);\n\n        for (var style in prefixedBackdropStyle) {\n          backdropStyle[style] = prefixedBackdropStyle[style];\n        }\n      }\n\n      if (this.props.contentStyle) {\n        var prefixedContentStyle = appendVendorPrefix(this.props.contentStyle);\n\n        for (var style in prefixedContentStyle) {\n          contentStyle[style] = prefixedContentStyle[style];\n        }\n      }\n\n      var backdrop = this.props.backdrop ? React.createElement(\"div\", {\n        style: backdropStyle,\n        onClick: this.props.closeOnClick ? this.handleBackdropClick : null\n      }) : undefined;\n\n      if (willHidden) {\n        var node = this.refs[ref];\n        this.addTransitionListener(node, this.leave);\n      }\n\n      return React.createElement(\"span\", null, React.createElement(\"div\", {\n        ref: \"modal\",\n        style: modalStyle,\n        className: this.props.className\n      }, sharp, React.createElement(\"div\", {\n        ref: \"content\",\n        tabIndex: \"-1\",\n        style: contentStyle\n      }, this.props.children)), backdrop);\n    },\n    leave: function () {\n      this.setState({\n        hidden: true\n      });\n      this.props.onHide();\n    },\n    enter: function () {\n      this.props.onShow();\n    },\n    show: function () {\n      if (!this.hasHidden()) return;\n      this.setState({\n        willHidden: false,\n        hidden: false\n      });\n      setTimeout(function () {\n        var ref = this.props.animation.getRef();\n        var node = this.refs[ref];\n        this.addTransitionListener(node, this.enter);\n      }.bind(this), 0);\n    },\n    hide: function () {\n      if (this.hasHidden()) return;\n      this.setState({\n        willHidden: true\n      });\n    },\n    toggle: function () {\n      if (this.hasHidden()) this.show();else this.hide();\n    },\n    listenKeyboard: function (event) {\n      if (this.props.keyboard && (event.key === \"Escape\" || event.keyCode === 27)) {\n        this.hide();\n      }\n    },\n    componentDidMount: function () {\n      window.addEventListener(\"keydown\", this.listenKeyboard, true);\n    },\n    componentWillUnmount: function () {\n      window.removeEventListener(\"keydown\", this.listenKeyboard, true);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}